---
- name: OVS Docker network setup | Remove Startup-script if exists
  win_file:
    path: C:\startup.ps1
    state: absent
- name: OVS Docker network setup | Create startup-script
  win_lineinfile:
    path: C:\startup.ps1
    create: yes
    line: |
      # Get Admin rights in case the current powershell doesnt have admin rights
      if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) { Start-Process powershell.exe "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs; exit }
      $RegROPath = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
      Remove-ItemProperty $RegROPath "OVN_Init_Node" -ErrorAction SilentlyContinue
      #TODO figure why they don't get automatically included
      Import-Module "C:\Windows\System32\WindowsPowerShell\v1.0\Modules\HostNetworkingService\HostNetworkingService.psm1"
      Import-Module "C:\Windows\System32\WindowsPowerShell\v1.0\Modules\OVS\OVS.psm1"
      Import-Module "C:\Windows\System32\WindowsPowerShell\v1.0\Modules\HNSHelper\HNSHelper.psm1"

      # # There should be only one transparent network
      $HNS_NW = Get-HNSNetwork | where {$_.type -eq "transparent"}
      $HNS_ID = $HNS_NW.Id
      Disable-OVSOnHNSNetwork $HNS_ID
      ovs-vsctl --if-exists --no-wait del-br br-ex
      ovs-vsctl --no-wait --may-exist add-br br-ex
      ovs-vsctl --no-wait add-port br-ex "vEthernet ({{interface_name}})" -- set interface  "vEthernet ({{interface_name}})" type=internal
      ovs-vsctl --no-wait add-port br-ex '{{interface_name}}'
      Stop-Service ovs-vswitchd
      Enable-OVSOnHNSNetwork $HNS_ID

      Start-Service ovs-vswitchd
      sleep 2
      Restart-Service ovs-vswitchd
      $GUID = (New-Guid).Guid
      ovs-vsctl set Open_vSwitch . external_ids:system-id="$($GUID)"
      ovs-vsctl set Open_vSwitch . external_ids:k8s-api-server="http://{{ kubernetes_info.MASTER_IP }}:8080"
      ovs-vsctl set Open_vSwitch . external_ids:ovn-remote="tcp:{{ kubernetes_info.MASTER_IP }}:6642" external_ids:ovn-nb="tcp:{{ kubernetes_info.MASTER_IP }}:6641" external_ids:ovn-encap-ip={{ host_public_ip }} external_ids:ovn-encap-type="geneve"
    newline: unix

- name: OVS Docker network setup | Make scheduled task from script
  win_scheduled_task:
    name: "something"
    actions:
    - path: powershell.exe
      arguments: -ExecutionPolicy Unrestricted -NonInteractive -File C:\startup.ps1
    frequency: once
    triggers:
    - type: boot

- name: Run scheduled task
  win_shell: |
    Start-ScheduledTask -TaskName something

- name: Pause
  pause:
    minutes: 1

# Wait for docker to create the HNS Network and the new adapter. Connection will
# drop shortly when doing this, wait for the connection to come back
- name: OVS Docker network setup | Wait for startup script up to 120 seconds to complete
  wait_for_connection:
    # The connection will drop while the script is running, start checking for
    # the connection after 30 seconds
    delay: 30
    timeout: 120
